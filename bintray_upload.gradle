group = GROUP
version = VERSION_NAME

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = POM_NAME
        desc = POM_DESCRIPTION
        websiteUrl = POM_URL
        issueTrackerUrl = POM_ISSUE_URL
        vcsUrl = POM_SCM_CONNECTION
        licenses = ["Apache-2.0"]
        labels = ['aar', 'android', 'easyprefs']
        publicDownloadNumbers = true
        dryRun = true //Whether to run this as dry-run, without deploying
        publish = true //If version should be auto published after an bintray_upload
    }
}

install {
    repositories.mavenInstaller {
        println 'Generate POM.XML values'
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name POM_NAME
                url POM_URL

                // Set your license
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID_0
                        name POM_DEVELOPER_NAME_0
                        email POM_DEVELOPER_EMAIL_0
                    }
                    developer {
                        id POM_DEVELOPER_ID_1
                        name POM_DEVELOPER_NAME_1
                        email POM_DEVELOPER_EMAIL_1
                    }
                }
                scm {
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                    url POM_URL

                }
            }
        }
    }
}
android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}JavaDoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        println 'generate javadoc file'
    }
}
task sourcesJar(type: Jar) {
    println 'create sources jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    println 'Generate Javadoc'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    println 'create javadoc and sources jar'
    println 'javadoc location: ' + javadoc.destinationDir
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    println 'archive artifacts'
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
