apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"

group = GROUP
version = VERSION_NAME

bintray {
    user = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : "empty"
    key = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : "empty"

    println user
    println key

    configurations = ['archives']
    dryRun = false // Whether to run this as dry-run, without deploying
    publish = false // If version should be auto published after an bintray_upload

    pkg {
        repo = 'maven'
        name = POM_NAME
        userOrg = POM_ORGANIZATION
        desc = POM_DESCRIPTION
        issueTrackerUrl = POM_ISSUE_URL
        vcsUrl = POM_URL
        licenses = ['Apache-2.0']
        labels = ['aar', 'android', 'easypref', 'sharedpreferences']
        publicDownloadNumbers = true

        version {
            name = '1.8'
            desc = 'Added support for storing ordered sets'
            vcsTag = '1.8'
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name POM_NAME
                description POM_DESCRIPTION
                url POM_URL

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID_0
                        name POM_DEVELOPER_NAME_0
                        email POM_DEVELOPER_EMAIL_0
                    }
                    developer {
                        id POM_DEVELOPER_ID_1
                        name POM_DEVELOPER_NAME_1
                        email POM_DEVELOPER_EMAIL_1
                    }
                    developer {
                        id POM_DEVELOPER_ID_2
                        name POM_DEVELOPER_NAME_2
                        email POM_DEVELOPER_EMAIL_2
                    }
                }
                scm {
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                    url POM_URL

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
